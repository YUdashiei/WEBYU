一.常量
 和变量一样，都是存储数据的容器
 声明
   const pi=3.14;
 常量声明后必须赋值，不允许重新赋值

二.数据类型
 分为原始类型和引用类型
 原始类型分为数值型、字符串型、布尔型、未定义型、空值
 1.数值型
  分为整型和浮点型
  1   2   3   4   5   6   7    8   9   10 ... 15  16
  8进制
  1   2   3   4   5   6   7   10  11   12
  16进制
  1   2    ...              7     8   9   a ...  f   10
  8进制：以0开头的数字，例如：012
  16进制：以0x开头的数字，不区分大小写，例如：0xa
  浮点型
  3141.5e-1
  314.15
  31.415e+1
  3.1415e+2
 2.字符串型
  被引号所包含的值就是字符串型，不区分单双引号
  查看任意一个字符的Unicode码
     'a'.charCodeAt()
检测数据类型
typeof 
 3.布尔型
  只有两个值，分别是true和false，代表真和假
  用于保存只有两个状态的值，例如：是否登录，是否为会员...
 4.未定义型 
  只有一个值undefined
  声明变量未赋值为undefined
 5.空
  只有一个值null，常用于引用类型的数据中
  
三.数据类型的转换
 分为隐式转换和强制转换
 1.隐式转换
  在运算过程中自动产生的转换
  (1)数字+字符串   //数字转换为字符串
   2+'3'  //'23'
  (2)数字+布尔型    //布尔型转为数字   true->1  false->0
   2+true //3
   2+false  //2
  (3)字符串+布尔型   //布尔型转为字符串
   '2'+true //'2true'
加号(+)的作用
数字之间的加运算符；字符串之间的拼接
  NaN：Not a Number，不是一个数字，在将一个值转换为数值的过程中没有成功的得到数字的结果。NaN和任何数字执行数学运算结果还是NaN
  所有隐式转换为数值自动调用函数Number
 2.强制转换
  (1)强制转换为数值
   Number()
Number('3')  //3
Number('3a')  //NaN
Number(true)  //1
Number(false)  //0
Number(undefined)  //NaN
Number(null)  //0
  (2)强制转换为整型
   parseInt()   
   只能将字符串和小数转为整型，其它类型转换结果为NaN
parseInt(-1.5)  //-1
parseInt('3.14')  //3
parseInt('3a4')  //3
parseInt('a4')  //NaN
  (3)强制转换为浮点型     
   parseFloat()
   用于将字符串转为浮点型
parseFloat('3.14')  //3.14
parseFloat('5a')  //5
parseFloat('a5')  //NaN
  (4)转字符串型（了解）
   只能用于将数值和布尔型转为字符串
   toString()
var n=2;
var str=n.toString()  //'2'

四.运算符
 表达式：由数据本身或者由运算符连接的操作数据组成的形式
 运算符分为算术运算符、比较运算符、逻辑运算符、位运算符、赋值运算符、三目运算符
 1.算术运算符
   +  -   *   /   %  ++  --
  %  取余
  ++  自增，一个变量在原来基础之上加1
  --   自减，一个变量在原来基础之上减1
var a2=5;
//先把a2的值赋给a3，然后a再执行自增
var a3=a2++;
var a4=5;
//先让a4执行自增，然后再把自增的结果赋给a5
var a5=++a4;
 2.比较运算符
  >  <  >=  <=  ==(等于)   !=(不等于)   ===(全等于)   !==(不全等于)
  ==   等于，只是比较值是否相同，可能产生隐式转换
  ===   全等于，要求值和类型都相同
  (1)3>'10'  //false
     数字和字符串比较，字符串转换数值
  (2)'3'>'10' //true
     字符串之间比较，比较的是首个字符的Unicode编码
     '3'->51    '1'->49
  查看以下比较
    3>'10a'  //false
    3<'10a'  //false
    3=='10a' //false
    NaN==NaN  //false
  NaN和任何数字比较(> < >= <= == ===)结果都是false
 3.逻辑运算符
  &&  逻辑与，关联的两个条件都是true结果是true
  ||  逻辑或，关联的两个条件有一个是 true结果是true
  !  逻辑非，取反向
