一
1.数据库末尾
(1)数据查询
简单查询：条件查询，模糊条件查询，分页查询
复杂查询：聚合查询，分组查询，子查询，多表查询
2.JS学习步骤
a.js历史，特点，应用场景，现状
b.搭建环境及语法规范
c.变量及常量
d.数据类型
e.运算符
f.逻辑结构
g.通用小程序
h.函数对象
i.第三方数据和框架
j.个人项目
3.js历史，特点，应用场景，现状
历史：95年出现 96年出现ie 97年合并
特点：无需编译js引擎执行
跨平台 弱类型语言 基于对象
现状:前端交互 后端开发
4.js搭建环境及语法规范
浏览器端：火狐，谷歌等各大浏览器..
服务器端：node.js
区分大小写，分多行注释和单行注释，代码后面分号可以省略
5.变量：储存数据的容器
var声明变量开辟空间 b 变量名 = 1 赋值：把1
储存在b变量名里面
变量命名规范：可以由数字，字母，下划线，美元符组成
不能由数字，关键字开头和使用中文;

二
1.常量：和变量一样都是储存数据的，必须赋值和不允许重新赋值
const 声明常量 b 常量名 = 1 常量值
2.数据类型
原始数据类型：Number(数字)String(字符串)Boolean(布尔型)
Undefined(未定义)Null(空值)
(1)数字型：整数和浮点数(小数)
(2)字符串:被引号包含的就是字符串
(3)布尔值：true真 false假
(4)未定义： 表示未赋值或只有它本身
(5)空:只有一个值null
引用数据类型：
3.数据类型转换
隐式转换：数值加字符串转为字符串型，其它类型和数字运算都为数字型。
强制转换：
(1)Number() 转数字
(2)ParseInt()转整型
(3)ParseFloat()转浮点型
(4)toString()转字符串
4.运算符
(1)算数运算符:+ - * / % ++ --
(2)比较运算符：> < <= >= == === != !==
(3)逻辑欲运算符：&& || !
  
三
1.运算符
(1)位运算符： & | ^ >> <<
(2)赋值运算符：+= -= *= /= %=
(3)三目运算符:条件表达式 ？表达式1 ： 表达式2;
2.浏览器端函数
alert()弹出警示框
prompt()弹出输入框
3.流程控制
(1)if语句：
if
(条件表达式){
语句块
}
(2)if else语句：
if(条件表达式){
语句块1
} else {
语句块2
}
(3)if else if语句：
if(条件表达式){
语句块1
} else if(条件表达式){
语句块2
} else{
语句块1+2
}
(4)switch case语句：是一种特殊的多项分支语句，只能进行全等于(===)的比较
switch(表达式){
case 值:
break;结束语句
}
四
1.循环
(1)while循环：
while(循环条件){
循环体
}
(2)do while循环：
do{
循环体
} while(循环条件)
(3)for循环：
for(初始值;循环条件;增量){
循环体
}
2.continue和break：
break  强制结束循环
continue  跳过某一次循环(后续的循环体)，还会继续往后执行
3.循环嵌套：任意两个循环之间都可以相互嵌套

五
函数：是一个功能体，接收若干个数据，返回处理的结果——为了封装重复执行的代码
1.系统函数：Number()/parseInt()/parseFlot()/alert()/prompt()
2.自定义函数：
function函数关键字 b函数名 ()行参{
函数体
} 函数名 b ()实参：实际传递的值
3.return 返回函数调用后结果或结束函数体的执行调用
4.变量作用域
全局作用域：在函数外部的区域
 函数作用域：在函数内部的区域
 全局变量：在全局作用域下声明的变量，可以在任意的作用域访问到
 局部变量：在函数作用域下声明的变量，只能在当前的作用域访问到
